; ====================================================
; DOCKER + MAVEN QUICK REFERENCE
; ====================================================

[PREREQUISITI]
; - Maven installato
; - Variabili d'ambiente configurate (JAVA_HOME, MAVEN_HOME)
; - Utilizzare la Variabile d'Ambiente nel Codice Java
; ---- private static String psw () {
; - return System.getenv("EMAIL_PASSWORD");
; ---- }


; - Docker Desktop installato
; - Stoppa Tomcat locale prima del run

[BUILD_PROGETTO]
; Compila il progetto e genera il .war dentro target/
mvn clean package

[DOCKERFILE_BASE]
; Esempio di Dockerfile per Tomcat
FROM tomcat:9-jdk17-openjdk
ADD target/app.war /usr/local/tomcat/webapps/ROOT.war
EXPOSE 8080
CMD ["catalina.sh", "run"]

; ROOT.war -> app disponibile a http://localhost:8080/
; app.war  -> app disponibile a http://localhost:8080/app

[BUILD_IMMAGINE]
docker build --no-cache -t megawrapper .

[RUN_CONTAINER]
; Porta host:porta interna (Tomcat di default 8080)
docker run --name nome-container -d -p 3200:3200 nomeapp  (invento nome-container)

docker run --name megawrapper-container -d -p 3100:3100 megawrapper


[RUN_CONTAINER_ENV]
; Con variabili d’ambiente
docker run -d -p 4000:8080 --name nome-container ^
  -e EMAIL_USER=you@example.com ^
  -e EMAIL_PASSWORD=yourpassword ^
  nomeapp

[GESTIONE_CONTAINER]
; Lista container attivi
docker ps

; Stop e rimozione container
docker rm -f nome-container

; ====================================================
; SCENARIO 1: BACKEND STANDALONE (SOLO JAVA)
; ====================================================
; Nessuna operazione extra: basta eseguire i comandi standard
; mvn clean package
; docker build ...
; docker run ...

; L'applicazione è servita direttamente da Tomcat nel container.

; ====================================================
; SCENARIO 2: BACKEND + FRONTEND ANGULAR
; ====================================================
; Pulizia cache Angular
ng cache clean

; Build Angular
ng build

; Copia output Angular dentro il backend (cartella webapp)
cp -r dist/angular-app/* ../src/main/webapp

; Torna nella root del backend, poi build e run
cd ..
mvn clean package
docker build --no-cache -t nomeapp .
docker run -d -p 8080:8080 --name nome-container nomeapp

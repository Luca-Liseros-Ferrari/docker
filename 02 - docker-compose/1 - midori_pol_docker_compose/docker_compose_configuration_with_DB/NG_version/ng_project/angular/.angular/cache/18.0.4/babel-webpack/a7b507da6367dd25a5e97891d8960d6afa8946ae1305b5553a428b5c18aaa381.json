{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor(http) {\n      this.http = http;\n      this.cartVisibilitySubject = new BehaviorSubject(false);\n      this.cartVisibility$ = this.cartVisibilitySubject.asObservable();\n      this.apiUrl = 'http://localhost:8080/midoripol/carrello';\n    }\n    addProductToCart(product, quantity) {\n      const userId = this.getUserId();\n      const data = {\n        ...product,\n        quantity,\n        userId\n      };\n      this.updateCartVisibility(true); // Aggiunto per aggiornare la visibilità dell'icona del carrello\n      return this.http.post(`${this.apiUrl}/add`, data, {\n        responseType: 'text'\n      });\n    }\n    removeProductFromCart(productId, quantity) {\n      const userId = this.getUserId();\n      const data = {\n        id: productId,\n        quantity,\n        userId\n      };\n      return this.http.post(`${this.apiUrl}/less`, data, {\n        responseType: 'text'\n      });\n    }\n    deleteCart(cart) {\n      const userId = this.getUserId();\n      const data = {\n        cartProducts: cart,\n        userId\n      };\n      this.updateCartVisibility(false); // Aggiunto per nascondere l'icona del carrello\n      return this.http.post(`${this.apiUrl}/delete`, data, {\n        responseType: 'text'\n      });\n    }\n    viewCart() {\n      const userId = this.getUserId();\n      return this.http.get(`${this.apiUrl}/viewCart?userId=${userId}`);\n    }\n    getUserCart() {\n      const userId = this.getUserId();\n      return this.http.get(`${this.apiUrl}/viewCart?userId=${userId}`);\n    }\n    getUserId() {\n      let userId = localStorage.getItem('userId');\n      if (!userId) {\n        userId = this.generateUniqueId();\n        localStorage.setItem('userId', userId);\n      }\n      return userId;\n    }\n    generateUniqueId() {\n      return uuidv4();\n    }\n    calculateTotalQuantity(cartProducts) {\n      return cartProducts.reduce((total, product) => total + product.quantity, 0);\n    }\n    updateCartVisibility(isVisible) {\n      this.cartVisibilitySubject.next(isVisible);\n    }\n    static #_ = this.ɵfac = function CartService_Factory(t) {\n      return new (t || CartService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartService,\n      factory: CartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return CartService;\n})();","map":{"version":3,"names":["BehaviorSubject","v4","uuidv4","CartService","constructor","http","cartVisibilitySubject","cartVisibility$","asObservable","apiUrl","addProductToCart","product","quantity","userId","getUserId","data","updateCartVisibility","post","responseType","removeProductFromCart","productId","id","deleteCart","cart","cartProducts","viewCart","get","getUserCart","localStorage","getItem","generateUniqueId","setItem","calculateTotalQuantity","reduce","total","isVisible","next","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Utente\\Desktop\\MIDORIBEATSORGANIZED\\angular\\src\\app\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n  private cartVisibilitySubject = new BehaviorSubject<boolean>(false);\r\n  cartVisibility$ = this.cartVisibilitySubject.asObservable();\r\n\r\n  private apiUrl = 'http://localhost:8080/midoripol/carrello';\r\n  constructor(private http: HttpClient) {}\r\n\r\n  addProductToCart(product: any, quantity: number): Observable<any> {\r\n    const userId = this.getUserId();\r\n    const data = { ...product, quantity, userId };\r\n    this.updateCartVisibility(true); // Aggiunto per aggiornare la visibilità dell'icona del carrello\r\n    return this.http.post(`${this.apiUrl}/add`,  data, { responseType: 'text' });\r\n  }\r\n\r\n  removeProductFromCart(productId: number, quantity: number): Observable<any> {\r\n    const userId = this.getUserId();\r\n    const data = { id: productId, quantity, userId };\r\n    return this.http.post(`${this.apiUrl}/less`, data, { responseType: 'text' });\r\n  }\r\n\r\n  deleteCart(cart: any): Observable<any> {\r\n    const userId = this.getUserId();\r\n    const data = { cartProducts: cart, userId };\r\n    this.updateCartVisibility(false); // Aggiunto per nascondere l'icona del carrello\r\n    return this.http.post(`${this.apiUrl}/delete`, data, { responseType: 'text' });\r\n  }\r\n\r\n  viewCart(): Observable<any> {\r\n    const userId = this.getUserId();\r\n    return this.http.get<any>(`${this.apiUrl}/viewCart?userId=${userId}`);\r\n  }\r\n\r\n  getUserCart(): Observable<any> {\r\n    const userId = this.getUserId();\r\n    return this.http.get<any>(`${this.apiUrl}/viewCart?userId=${userId}`);\r\n  }\r\n\r\n  private getUserId(): string {\r\n    let userId = localStorage.getItem('userId');\r\n    if (!userId) {\r\n      userId = this.generateUniqueId();\r\n      localStorage.setItem('userId', userId);\r\n    }\r\n    return userId;\r\n  }\r\n\r\n  private generateUniqueId(): string {\r\n    return uuidv4();\r\n  }\r\n\r\n  calculateTotalQuantity(cartProducts: any[]): number {\r\n    return cartProducts.reduce((total, product) => total + product.quantity, 0);\r\n  }\r\n\r\n  updateCartVisibility(isVisible: boolean): void {\r\n    this.cartVisibilitySubject.next(isVisible);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
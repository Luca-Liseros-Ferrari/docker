per il database assicurarsi che sia localhost nel persistence xml:   
 <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/newdb?useSSL=false&amp;allowPublicKeyRetrieval=true"/>


SQL TOOLS SETUP:
creare il database usando come nome del db mysql

Connection name*
midoripoljsbeats
Connection group
Connect using*
Server and Port
Server Address*
localhost
Port*
3306
Database*
mysql
Username*a
root
Password mode
SQLTools Driver Credentials
MySQL driver specific options
Authentication Protocol
default
Try to switch protocols in case you have problems.
SSL
Disabled
Over SSH
Disabled
Connection Timeout
Show records default limit 50

--- successivamente si potrà creare il db al punto successivo
Per creare il db creare un file sql nella root, inserire nome del db da creare e lanciare la query 
(tasto play in alto a sx).

Una volta creato si può fare un mvn clean package, poi aggiungere il server, poi il deployment. Allo start server il db dovrebbe essere popolato.

[GUIDA_DEPLOY_MIDORI_POL_VS_CODE]

# 1. Prerequisiti
# - Java JDK installato (es. JDK 20)
# - Apache Tomcat 9 installato (es. C:\tomcat9)
# - Maven installato
# - VS Code con estensione Java / Maven

# 2. Configurazione pom.xml
# Assicurati che il build abbia questa sezione per war esploded
# Inserisci sotto <build> nel pom.xml:

[BUILD_POM]
finalName = midoripol

pluginManagement:
  plugins:
    - maven-clean-plugin: 3.1.0
    - maven-resources-plugin: 3.0.2
    - maven-compiler-plugin: 3.8.0
    - maven-surefire-plugin: 2.22.1
    - maven-war-plugin: 3.2.2
    - maven-install-plugin: 2.5.2
    - maven-deploy-plugin: 2.8.2

plugins:
  - maven-compiler-plugin:
      configuration:
        source: 17
        target: 17
  - maven-war-plugin:
      configuration:
        failOnMissingWebXml: false
        outputDirectory: ${project.build.directory}/midoripol
        warName: midoripol
      executions:
        - id: exploded-war
          phase: package
          goals: [exploded]

# 3. Generare war e war exploded
# Apri terminale VS Code nella root del progetto
# Esegui:
mvn clean package

# Risultato:
# - target/midoripol.war       --> war normale
# - target/midoripol/           --> cartella exploded pronta per deploy

# 4. Deploy su Tomcat
# - Ferma Tomcat se è in esecuzione:
C:\tomcat9\bin\shutdown.bat

# - Copia la cartella exploded:
C:\percorso\progetto\target\midoripol  -->  C:\tomcat9\webapps\midoripol # nonché percorso cartella di tomcat sul PC

# - Controlla che contenga:
#   - WEB-INF/classes
#   - WEB-INF/lib
#   - index.jsp o index.html
#   - altre cartelle della webapp

# - Avvia Tomcat:
C:\tomcat9\bin\startup.bat

# 5. Accesso all'applicazione
# URL: http://localhost:8080/midoripol/
# Oppure http://localhost:8080/midoripol/index.jsp

# 6. Aggiornamento al volo
# - Modifica classi o JSP
# - Ricompila le classi con Maven:
mvn compile
# - Aggiorna i file nella cartella exploded
# - Ricarica pagina nel browser

# 7. Consigli pratici
# - Non modificare manualmente cartelle in webapps con Tomcat in esecuzione
# - Se vuoi cambiare il context path a root:
#   - Rinomina la cartella exploded in ROOT
#   - Accedi con http://localhost:8080/
# - Per VS Code puoi usare task Maven per automatizzare build + copy nella cartella exploded
